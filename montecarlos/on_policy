import numpy as np
import matplotlib.pyplot as plt

from env import Maze
from utils import plot_policy, plot_values, test_agent


'''
Epsilon-Greedy Policy: chooses action with the maximum action-value with probability 1-epsilon but with probability epsilon it chooses a random action
to ensure that all actions are explored. This is in order to prevent the agent from taking suboptimal actions.

On-Policy: interacting with the environment using the current policy, which is evaluated and improved upon at the same time.
'''


def on_policy_mc_control(policy,action_values,episodes,gamma=0.99,epsilon=0.2):
    sa_returns = {}
    for episode in range(1,episodes+1):
        state = env.reset()
        done = False
        transitions = []
        while not done:
            action = policy(state,epsilon)
            next_state, reward, done, _ = env.step(action)
            transitions.append([state,action,reward])
            state = next_state
        G = 0
        for state_t, action_t, reward_t in reversed(transitions):
            G = reward_t + gamma * G
            if not (state_t, action_t) in sa_returns:
                sa_returns[(state_t,action_t)] = []
            sa_returns[(state_t,action_t)].append(G)
            action_values[state_t][action_t] = np.mean(sa_returns[state_t,action_t])

if __name__ == '__main__':
    env = Maze()
    frame = env.render('mode=rgb_array')
    plt.axis('off')
    plt.imshow(frame)